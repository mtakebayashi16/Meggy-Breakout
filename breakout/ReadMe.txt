Part I:?Meggy Jr. BreakoutYou are a small blue ball trying to escape, but there is a brick wall in the way that is blocking your only way out. Once set in motion, there is no way you can control the direction you go in. Beneath you is a large pit that you can’t fall into. However, there is a moving platform (controlled by the player) that will help you escape. By bouncing against the bricks, you can smash your way out.?Part II: ?Tell the story of the process of writing your Meggy game.What was difficult? What was surprising?Definitely the most difficult part was getting the bricks to disappear when hit by the ball. Although I was surprised how easy it was to get the bouncing ball moving, since I thought that would be one of the hardest parts to program before starting the project. However, I found that it was one of the easiest parts.Please describe how collaboration with others (classmates, teachers, friends) enhanced your building of this game.It was really useful getting peer feedback, and it helped me fix errors I didn’t realize I had. Kiana is doing the same game as me, and so we talked a couple of times about how we were doing certain parts (different ways to get the ball to move, and using an array versus coordinates for the platform).Any bugs or stuff that doesn't quite work right? Please explain in detail, as well as what thoughts you have about what might be wrong. Be specific.Level one seems to work fine, but in level two and higher there are a couple instances where either a block won’t disappear unless hit repeatedly or two blocks will disappear when only one was hit. I couldn’t figure out why this was happening (I checked the math repeatedly) so I ended up adding a bunch of extra exceptions to the code to get rid of each individual problem. Although, I couldn’t get to all of them (probably didn’t realize they happened when I tested the game), but I tried to get rid of as many bugs as I could. If you had more time to work on this project, what features might you add? What would make this game even better?Definitely fix up the collision detection. Like I said in the previous question, I ended up adding a bunch of exceptions to the rules instead of fixing the rules themselves. I’m sure there is a far shorter and less complicated way of doing the collision detection than what I ended up doing, but I didn’t have enough time to explore all of the options. I would have also liked to add more features, like power ups and such, but I just ran out of time.What did this game teach you about programming? About game design? About Life In General?A couple things I learned are to take breaks during work and to ask for help when I need it. After staring at the code for so long, there is only so much you can get done before you come to a roadblock. This is great general advice, since it is always best to seek out the advice of others when stuck. I learned how hard it is to create a game and how much effort must go into big name console games (especially when you add complex graphics and animation to the coding). Most importantly, I learned how to approach problems like a programmer. This involves looking at problems in a different way, and using what you already know to come up with a solution. For example, sometimes it is easier to start with what is already known and then work on the actual details (similar to pseudo-coding then writing actual code).